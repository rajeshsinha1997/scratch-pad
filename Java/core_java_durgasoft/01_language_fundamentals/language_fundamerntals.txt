Identifier:
------------
A name in Java program is called Identifier, which can be used for identification purpose. It can be method name, variable name, class name or label name.

Rules for defining Java identifiers:
------------------------------------
* The only allowed characters in Java identifiers are 'a-z', 'A-Z', '0-9', '$', '_'. If we are using any other character then we will get compile-time error. As example, 'total_number' is a valid Java identifier, but 'total#' is invalid.
* Identifiers can not start with digits. As example, 'total123' is a valid Java identifier, but '123total' is invalid.
* Java identifiers are case-sensitive, of course Java language itself is treated as a case-sensitive programming language. As example, 'number', 'Number' and 'NUMBER' are three different identifiers in Java.
* There is no length limit for Java identifiers. But, it is not recommended to take too lengthy identifiers.
* We can not use reserved-words as identifiers. As example, using 'if' as an identifier is not allowed in Java.
* All pre-defined Java class names and Interface names we can use as identifiers. As example, 'String' and 'Runnable' are valid Java identifiers. Even though it is valid, but it is not a good programming practice, because it reduces readability and creates confusion.



Reserved Words:
---------------
In Java some words are reserved to represent some meaning or functionality. Such type of words are called reserved words.

There are a total of 53 reserved words in Java as listed below,
* Reserved Literals (3) - 'true', 'false', 'null'
* Unused Keywords (2) - 'const', 'goto'
* Keywords for Data-Types (8) - 'byte', 'short', 'int', 'long', 'float', 'double', 'boolean', 'char'
* Keywords for Flow-Control (11) - 'if', 'else', 'switch', 'case', 'default', 'while', 'do', 'for', 'break', 'continue', 'return'
* Keywords for Modifiers (11) - 'public', 'private', 'protected', 'static', 'final', 'abstract', 'synchronized', 'native', 'strictfp', 'transient', 'volatile'
* Keywords for Exception-Handling (6) - 'try', 'catch', 'finally', 'throw', 'throws', 'assert'
* Class related Keywords (6) - 'class', 'interface', 'extends', 'implements', 'package', 'import'
* Object related Keyword (4) - 'new', 'instanceof', 'super', 'this'
* Return-Type Keyword (1) - 'void'
* ENUM Keyword (1) - 'enum'

--> 'goto': Usage of the keyword 'goto' created several problems in old languages. Hence, SUN people banned this keyword in Java.
--> 'const': Use the keyword 'final' instead of 'const' in Java.
--> 'enum': We can use 'enum' to define a group of named constants in Java.

In Java return-type is mandatory, if a method won't return anything, then we have to declare that method with the return-type 'void'. But in C language return-type is optional and the default return-type is 'int'.

'goto' and 'const' are unused keywords in Java, and if we are trying to use then we will get compile-time error.

Conclusions:
------------
* All 53 reserved-words in Java contains only lower-case alphabet symbols.
* In Java we have only 'new' keyword, and there is no 'delete' keyword. Because, destruction of the useless objects is the responsibility of the garbage collector.
* The following are newly introduced keywords in Java, strictfp (1.2v), assert (1.4v), enum (1.5v)



Data-Types:
-----------
In Java every variable and every expression has some type. Each and every data-type is clearly defined, every assignment should be checked by compiler for type compatibility. Because of above reasons we can conclude, Java language is Strongly-Typed Programming Language.

--> Java is not considered as pure Object-Oriented Programming Language, because several OOPs features are not satisfied by Java (like operator-overloading, multiple-inheritance, etc.). Moreover we are depending on primitive data-types, which are non-objects.

* Below is the different type of data-types available in Java,


                                                    |- Integral Data-Type: 'byte', 'short', 'int', 'long'
                                                    |
                            |- Numeric Data-Type ----
                            |                       |
                            |                       |- Floating Point Data-Type: 'float', 'double'
Primitive Data-Types (8) ----
                            |
                            |
                            |- Non-Numeric Data-Type: 'char', 'boolean'


* Except 'boolean' and 'char' the remaining data-types are considered as Signed Data-Types, because we can represent both positive and negative numbers.


* Byte Data-Type:
--> Size: 1 byte (8 bits)
--> Max Value: (2^7)-1 [+127]
--> Min Value: (-2^7) -128
--> The Most Significant Bit (MSB) acts as the sign-bit, where 0 means positive number and 1 means negative number. Positive numbers will be represented directly in the memory, whereas negative numbers will be represented in 2's complement form.

* Short Data-Type:
--> Size: 2 bytes (16 bits)
--> Max Value: (2^15)-1 [32767]
--> Min Value: -2^15 [-32768]
--> This is the most rarely used data-type in Java.
--> Short data-type is best suitable for 16-bit processors like 8085, but these processors are completely outdated and hence corresponding short data-type is also outdated data-type.

* Integer Data-Type:
--> Size: 4 bytes (32 bits)
--> Max Value: (2^31)-1 [2147483647]
--> Min Value: -2^31 [-2147483648]
--> The most commonly used data-type in Java is 'int'.

* Long Data-Type:
--> Size: 8 bytes (64 bits)
--> Max Value: (2^63)-1
--> Min Value: (-2^63)
--> Sometimes 'int' may not be enough to hold big values, then we should go for the 'long' data-type. As example, the amount of distance traveled by light in 1000 days, to hold this value 'int' may not be enough, we should go for 'long' data-type.


* All the above data-types ('byte', 'short', 'int', 'long') are meant for representing integral values. If we want to represent floating-point values, then we should go for floating-point data-types ('float', 'double').


* Float Data-Type:
--> Size: 4 bytes (32 bits)
--> Max Value: 3.4e38
--> Min Value: -3.4e38
--> If we want 5-6 decimal places of accuracy, then we should use 'float' data-type.
--> 'float' data-type uses single-precision.

* Double Data-Type:
--> Size: 8 bytes (64 bits)
--> Max Value: 1.7e308
--> Min Value: -1.7e308
--> If we want 14-15 decimal places of accuracy, then we should use 'double' data-type.
--> 'double' data-type follows double-precision.


* Boolean Data-Type:
--> Size: N.A. [Virtual Machine Dependant]
--> Range: N.A. [Allowed values are 'true'/'false']


* Character Data-Type:
--> Size: 2 bytes (16 bits)
--> Range: 0 to 65536 (Unicode values)
--> Old languages (like C/C++) are ASCII code based, and the number of different allowed ASCII code characters are less than or equals to 256. To represent these 256 characters, 8 bits are enough. Hence, the size of 'char' in old languages is 1 byte. But Java is Unicode based, and the number of different Unicode characters are greater than 256 and less than or equals to 65536. To represent these many characters 8 bits may not be enough, compulsory we should use 16 bits. Hence, the size of 'char' in Java is 2 bytes (16 bits).


* 'null' is the default value for object reference, and we can't apply for primitives. If we are trying to use for primitives, then we will get compile-time error.



Literals:
---------
* A constant value, which can be assigned to the variable is called a literal. As example, 'int x = 10', here the value '10' is a constant value or literal.


* Integral Literals:
--------------------
--> For integral data-types ('byte', 'short', 'int', 'long'), we can specify literal value in the following ways,
    * Decimal Form (base 10): Allowed digits are 0-9.
    * Octal Form (base 8): Allowed digits are 0-7. Literal value should be prefixed with '0'
    * Hexadecimal Form (base 16): Allowed digits are 0-9, A-F. For extra digits (A-F) we can use both lower case and upper case characters, this is one of very few areas where Java is not case-sensitive. The literal value should be prefixed with '0x' or '0X'.
    These are only possible ways to specify literal value for integral data-types.

--> By default every integral literal is of type 'int', but we can also specify integral literal explicitly as 'long' type by suffixing it with 'l' or 'L'.

--> There is no direct way to specify 'byte' and 'short' literal explicitly, but indirectly we can specify. Whenever we are assigning integral literal to the 'byte' variable, and if the value is within the range of 'byte', then compiler treats it automatically as 'byte' literal. Similarly same for the 'short' literal also.


* Floating-Point Literals:
--------------------------
--> By default, every floating-point literal is of 'double' type, and hence we can't assign directly to the 'float' variable. But, we can specify floating-point literal as 'float' type by suffixing it with 'f' or 'F'.

--> We can specify explicitly floating-point literal as 'double' type by suffixing it with 'd' or 'D'. Of course this convention is not required.

--> We can specify floating-point literals only in 'decimal' form, and we can't specify in 'octal' and 'hexadecimal' forms.

--> We can assign integral literal directly to floating-point variables and that integral literal can be specified either in 'decimal', 'octal' or 'hexadecimal' forms.

--> We can't assign floating-point literals to integral types.

--> We can specify floating-point literal even in exponential form (scientific notation).


* Boolean Literals:
-------------------
--> The only allowed values for 'boolean' data-types are 'true' or 'false'.


* Character Literals:
---------------------
--> We can specify 'char' literals as a single character within single quotes. As example, "char ch = 'a'"

--> We can specify 'char' literal as an integral literal, which represents unicode value of the corresponding character, and that integral literal can be specified either in 'decimal', 'octal' or 'hexadecimal' forms, but, the allowed range is 0-65535.

--> We can represent 'char' literal in unicode representation also, which is nothing but '\uXXXX' where the 'XXXX' is the corresponding 4 digit hexadecimal number of the character.

--> Every escape character is a valid 'char' literal.


* String Literals:
------------------
--> Any sequence of characters within double quotes is treated as String literal.


* v1.7 Enhancements w.r.t Literals:
-----------------------------------
--> Binary Literals: For integral data-types, until 1.6v we can specify literal value in the following ways,
                     * Decimal Form
                     * Octal Form
                     * Hexadecimal Form
                     But, from v1.7 onwards we can specify literal value even in binary  form also. Allowed digits are '0' and '1'. Literal value should be prefixed with '0b' or '0B'.

--> Usage of '_' Symbol in Numeric Literals: From v1.7 onwards, we can use '_' symbol between digits of numeric literals. The main advantage of this approach is, readability of the code will be improved. At the time of compilation, these '_' symbols will be removed automatically. We can use more than one '_' symbol also within the digits. We can use '_' symbol only between the digits, if we are using anywhere else, we will get compile-time error.


                                byte --> short --> int --> long --> float --> double
                                                    ^
                                                    |
                                                    |
                                                   char


--> 8 byte 'long' value we can assign to 4 byte 'float' variable, because both are following different memory representations internally.



Arrays:
-------

* Introduction:
---------------
--> An array is an indexed collection of fixed number of homogeneous data elements. The main advantage of an array is, we can represent a large number of values by using a single variable, so that the readability of the code will be improved. But, the main disadvantage of an array is, it is fixed in size, that means once we create an array there is no chance of increasing or decreasing the size based on our requirements. Hence to use arrays, compulsory we should know the size in advance, which may not be possible always.


* Array Declaration:
--------------------
--> At the time of declaration, we can't specify the size, otherwise we will get compile-time error.

--> If we want to specify dimension before the variable name, that facility is applicable only for the first variable in an array declaration. If we are trying to apply for the remaining variables, we will get compile-time error.


* Array Creation:
-----------------
--> Every array in Java is an object only. Hence, we can create arrays by using the 'new' operator.

--> For every array type, the corresponding classes are available and these classes are part of the Java language, and not available to the programmer level.

--> At the time of array creation, compulsory we should specify the size. Otherwise, we will get compile time error.

--> It is legal to have an array with size 0 in Java.

--> If we are trying to specify an array with the size as some negative integer value, then we will get a runtime exception saying 'NegativeArraySizeException'.

--> To specify the size of an array, the allowed data-types are 'byte', 'short', 'char' and 'int'. If we are trying to specify the size of an array with any other data-type, then we will get compile-time error.

--> The maximum allowed array size in Java is '2147483647', which is the maximum value of the 'integer' data-type.

--> In Java, 2D arrays are not implemented by using 'Matrix' style. SUN people followed 'Array of Arrays' approach for multi-dimensional array creation. The main advantage of this approach is that the memory utilization will be improved.

--> Once we create an array, every array element by default initialized with default values.

--> Once we create an array, every array element by default is initialized with the corresponding default values. If we are not satisfied with the default values, then we can override these values with our customized values.

--> If we are trying to access any array element with out of range index (either positive or negative integer value), then we will get runtime exception saying 'ArrayIndexOutOfBoundsException'.


* Array Declaration, Creation & Initialization in a Single Line:
----------------------------------------------------------------
--> We can declare, create and initialize an array in a single line (shorter representation). We can use this shortcut even for multi-dimensional arrays also. If we want to use this shortcut, compulsory we should perform all activities in a single line. If we are trying to divide it into multiple lines, then we will get compile time error.


* length vs length():
---------------------
--> length: 'length' is a 'final' variable applicable for arrays. this variable represents the size of the array.

--> length(): 'length()' method is a final method applicable for String objects. This method returns the number of characters present in a String object.

--> 'length' variable applicable for arrays but not for String objects, where as 'length()' method applicable for String objects but not for arrays.

--> In case of multi-dimensional arrays, 'length' variable represents only base size but not total size.

--> There is no direct way to specify the total length of a multi-dimensional array. But indirectly we can find by performing a sum of the lengths of every next level arrays.


* Anonymous Arrays:
-------------------
--> Sometimes we can declare an array without a name, such type of nameless arrays are called 'Anonymous Arrays'. The main purpose of anonymous arrays are to be used just for the current instance (one-time usage).

--> We can create anonymous array as follows: new int[]{10, 20, 30, 40}

--> While creating anonymous arrays, we can't specify the size. Otherwise, we will get compile-time error.

--> We can create multi-dimensional anonymous arrays also as follows: new int[][]{{10, 20}, {30, 40}}

--> Based on our requirement, we can give the name for anonymous array, then it is no longer anonymous.


* Array Element Assignments:
----------------------------
--> Case 1: In the case of primitive type arrays, as array elements we can provide any type, which can be implicitly promoted to the declared type. As example, in the case of a 'float' type array the allowed data-types are 'byte', 'short', 'char', 'int', 'long' and 'float'.

--> Case 2: In the case of object-type arrays, as array elements we can provide either declared type objects or it's child class objects.

--> Case 3: For 'Interface' type arrays as array elements, its implementation class objects are allowed.


* Array Variable Assignments:
-----------------------------
--> Case 1: Element level promotions are not applicable at array level. As example, 'char' element can be promoted to 'int' type, but 'char[]' can not be promoted to 'int[]'. Also, in the case of Object type arrays, child class type array can be promoted to parent class type array.

--> Case 2: Whenever we are assigning one array to another array, internal elements won't be copied, just the reference variables will be re-assigned.

--> Case 3: Whenever we are assigning one array to another array, the dimensions must be matched. As example, in the place of 1D 'int' array we should provide another 1D array only. If we are trying to provide any other dimension, then we will get compile-time error. Whenever we are assigning one array to another array, both dimensions and types must be matched, but sizes are not required to match.



Types of Variables:
---------------------

--> Based on the type of value represented by a variable, all variables are divided into 2 types,
    
    * Primitive Variables: These type of variables can be used to represent primitive values. As example,

                                        int x = 10;
    
    * Reference variables: These type of variables can be used to refer objects. As example,
    
                                    Student s = new Student;


--> Based on the position of declaration and behavior, all variables are divided into 3 types,

    1. Instance Variable
    2. Static Variable
    3. Local Variable



* Instance Variable:
--------------------
--> If the value of a variable is varied from object to object, then such type of variables are known as Instance variables. For every object a separate copy of instance variables will be created.

--> Instance variables should be declared within the class directly, but outside of any method, block or constructor.

--> Instance variables will be created at the time of the object creation, and will be destroyed at the time of the object destruction. Hence, the scope of an instance variable is same as the scope of the object.

--> Instance variables will be stored in the 'Heap' memory as a part of object.

--> We can't access instance variables directly from static area, but we can access by using object reference. But, we can access instance variable directly from instance area.

--> For instance variables, JVM will always provide default values, and we are not required to perform initialization explicitly.

--> Instance variables are also known as 'Object-Level Variables' or 'Attributes'.



* Static Variables:
-------------------
--> If the value of a variable is not varied from object to object, then it is not recommended to declare that variable as an instance variable. We should declare such type of variables at class level by using the 'static' modifier.

--> In the case of instance variables, for every object a separate copy will be created, but in the case of static variables a single copy will be created at class level, and it will be shared among every object of the class.

--> Static variables should be declared within the class directly but outside of any method or block or constructor.

--> Static variables will be created at the time of class loading, and destroyed at the time of class un-loading. Hence, scope of a static variable is exactly same as the scope of the .class file.

--> Static variables will be stored in the 'method' memory area.

--> We can access static variables either by object reference or by class name. But recommended way to access static variables is by using class name. Also, within the same class it is not required to use class name and we can access static variables directly.

--> We can access static variables directly from both instance and static areas.

--> For static variables, JVM will provide default values and we are not required to perform initialization explicitly.

--> Static variables are also known as 'Class Level Variables' or 'Fields'.
