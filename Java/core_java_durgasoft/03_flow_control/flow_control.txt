Flow-Control describes the order in which the statements will be executed at runtime.

There are 3 types of flow-control statements,

1. Selection Statements: Among several options, only one option will be selected and executed.
    * if-else
    * switch-case

2. Iterative Statements: A group of statements will be executed iteratively.
    * while
    * do-while
    * for
    * for-each (v1.5)

3. Transfer Statements:
    * break
    * continue
    * return
    * try-catch-finally
    * assert (v1.4)



Selection Statements:
---------------------
* If-Else: The argument provided to the if statement should be of type boolean. By mistake, if we are trying to provide any other type, then we will get compile-time error. Also, the 'else' part and the curly braces are optional. Without curly braces, only one statement is allowed under the 'if' block, which should not be a declarative statement.

    The semicolon (;) is a valid Java statement, which is also known as the empty statement.

    There is no 'dangling else' problem in Java. Every 'else' block is mapped to the nearest 'if' block.

* Switch-Case: If several options are available, then it is not recommended to use nested 'if-else' statements, because it reduces readability. To handle this requirement, we should go for 'switch-case' statement.

    Until v1.4 of Java, the allowed argument types for the 'switch' statement are,
    --> byte
    --> short
    --> char
    --> int

    From v1.5 of Java onwards, corresponding wrapper classes of the above types and Enum types are also allowed as argument of 'switch' statement. And, from v1.7 of Java onwards, String type is also allowed as argument of 'switch' statement.

    Curly braces are mandatory in 'switch' statement.

    Both 'case' and 'default' statements are optional, i.e., an empty 'switch' statement is a valid Java syntax.

    Inside 'switch', every statement should be under some 'case' or 'default'. Independent statements are not allowed inside a 'switch', otherwise we will get compile-time error.

    Every 'case' label should be a compile-time constant (which are constant expressions). Otherwise, we will get compile-time error.

    Both 'switch' argument and 'case' labels can be expressions, but 'case' labels should be constant expressions.

    Every 'case' label should be in the range of the argument type of the 'switch' statement. Otherwise, we will get compile-time error.

    Duplicate 'case' labels are not allowed. Otherwise, we will get compile-time error.

    Fall-Through: Within the 'switch' statement if any 'case' is matched, from that case onwards all statements will be executed until a 'break' or end of the switch is encountered. This is called 'Fall-Through' inside a 'switch' statement. The main advantage of 'Fall-Through' inside a switch is, we can define common action for multiple cases (code reusability is improved).

    Default Case: Within the switch, we can write the 'default' case at most once. The 'default' case will be executed if and only if no other case is matched. Within the 'switch', we can write the default case anywhere, but it is recommended to write the 'default' case as the last case statement.



Iterative Statements:
---------------------
* While Loop: If we don't know the number of iterations in advance, then we should go for the 'while' loop. The conditional argument used in the 'while' loop should be of type 'boolean'. If we are trying to provide any other type, then we will get compile-time error. Curly braces are optional and without curly braces, we can take only one statement under the 'while' loop, which should not be a declarative statement.

--> Every 'final' variable will be replaced by the value at compile-time only.

--> If every argument is a 'final' variable (compile-time constant), then that operation should be performed at compile-time only.

* Do-While Loop: If we want to execute the corresponding loop body at least once, then we should go for the 'Do-While' loop. Curly braces are optional, and without curly braces, we should take at least one statement between 'do' and 'while', which should not be a declarative statement.
