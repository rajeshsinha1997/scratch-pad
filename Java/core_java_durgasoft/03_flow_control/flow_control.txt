Flow-Control describes the order in which the statements will be executed at runtime.

There are 3 types of flow-control statements,

1. Selection Statements: Among several options, only one option will be selected and executed.
    * if-else
    * switch-case

2. Iterative Statements: A group of statements will be executed iteratively.
    * while
    * do-while
    * for
    * for-each (v1.5)

3. Transfer Statements:
    * break
    * continue
    * return
    * try-catch-finally
    * assert (v1.4)



Selection Statements:
---------------------
* If-Else: The argument provided to the if statement should be of type boolean. By mistake, if we are trying to provide any other type, then we will get compile-time error. Also, the 'else' part and the curly braces are optional. Without curly braces, only one statement is allowed under the 'if' block, which should not be a declarative statement.

    The semicolon (;) is a valid Java statement, which is also known as the empty statement.

    There is no 'dangling else' problem in Java. Every 'else' block is mapped to the nearest 'if' block.

* Switch-Case: If several options are available, then it is not recommended to use nested 'if-else' statements, because it reduces readability. To handle this requirement, we should go for 'switch-case' statement.

    Until v1.4 of Java, the allowed argument types for the 'switch' statement are,
    --> byte
    --> short
    --> char
    --> int

    From v1.5 of Java onwards, corresponding wrapper classes of the above types and Enum types are also allowed as argument of 'switch' statement. And, from v1.7 of Java onwards, String type is also allowed as argument of 'switch' statement.

    Curly braces are mandatory in 'switch' statement.

    Both 'case' and 'default' statements are optional, i.e., an empty 'switch' statement is a valid Java syntax.

    Inside 'switch', every statement should be under some 'case' or 'default'. Independent statements are not allowed inside a 'switch', otherwise we will get compile-time error.

    Every 'case' label should be a compile-time constant (which are constant expressions). Otherwise, we will get compile-time error.

    Both 'switch' argument and 'case' labels can be expressions, but 'case' labels should be constant expressions.

    Every 'case' label should be in the range of the argument type of the 'switch' statement. Otherwise, we will get compile-time error.

    Duplicate 'case' labels are not allowed. Otherwise, we will get compile-time error.

    Fall-Through: Within the 'switch' statement if any 'case' is matched, from that case onwards all statements will be executed until a 'break' or end of the switch is encountered. This is called 'Fall-Through' inside a 'switch' statement. The main advantage of 'Fall-Through' inside a switch is, we can define common action for multiple cases (code reusability is improved).

    Default Case: Within the switch, we can write the 'default' case at most once. The 'default' case will be executed if and only if no other case is matched. Within the 'switch', we can write the default case anywhere, but it is recommended to write the 'default' case as the last case statement.



Iterative Statements:
---------------------
* While Loop: If we don't know the number of iterations in advance, then we should go for the 'while' loop. The conditional argument used in the 'while' loop should be of type 'boolean'. If we are trying to provide any other type, then we will get compile-time error. Curly braces are optional and without curly braces, we can take only one statement under the 'while' loop, which should not be a declarative statement.

--> Every 'final' variable will be replaced by the value at compile-time only.

--> If every argument is a 'final' variable (compile-time constant), then that operation should be performed at compile-time only.

* Do-While Loop: If we want to execute the corresponding loop body at least once, then we should go for the 'Do-While' loop. Curly braces are optional, and without curly braces, we should take at least one statement between 'do' and 'while', which should not be a declarative statement.

* For Loop: 'For' loop is the most commonly used loop in Java. If we know the number of iterations in advance, then 'for' loop is the best choice. Curly braces are optional, and without curly braces we can take only one statement under 'for' loop, which should not be a declarative statement.

    The 'initialization' section of a 'for' loop will be executed only once in the whole 'for' loop life-cycle. At this section, we can declare and initialize local variables of the corresponding 'for' loop. Here, also we can declare any number of variables but they should be of the same data-type. By mistake, if we are trying to declare variables of different data-types, then we will get compile-time error.

    In the 'initialization' section, we can take any valid java statement.

    In the 'conditional-check' section of a 'for' loop, we can take any valid Java expression which should be of 'boolean' data-type. This section is also optional, and if we are not taking anything, then compiler will always place 'true'.

    In the 'increment/decrement' section of a 'for' loop, we can take any valid Java statement. This is also an optional section.

    * All the 3 sections of a 'for' loop are optional and independent of each-other.

* For-Each Loop (Enhanced For Loop): The 'For-Each' loop or the 'Enhanced For' loop was introduced in the v1.5 of Java. It is a specially designed loop to retrieve elements of 'Arrays' and 'Collections'.

    The 'For-Each' loop is best choice to retrieve elements of 'Arrays' and 'Collections'. But, it's limitation is it is applicable only for 'Arrays' and 'Collections', and it is not a general purpose loop.

    By using the normal 'for' loop, we can print the elements of an array either in their original order, or in the reverse order. But, by using the 'for-each' loop, we can print the elements of an array only in their original order, but not in the reverse order.

* Iterable Interface: The target element in a 'for-each' loop should be an 'Iterable' object. An object is said to be an 'Iterable' object if and only if the corresponding class implements the class 'java.lang.Iterable'. The 'Iterable' interface was introduced in the v1.5 of Java and it contains only a single method which is 'iterator'.

    All 'Array' related classes and 'Collection' implemented classes already implements the 'Iterable' interface.

* Difference between 'Iterator' and 'Iterable' interfaces:
    --> The 'Iterator' interface is related to collections, whereas the 'Iterable' interface is related to the 'for-each' loop.
    --> We can use the 'Iterator' interface to retrieve elements of collections one by one. Whereas the target element in a 'for-each' loop should be an 'Iterable' object.
    --> The 'Iterator' interface is present in the 'java.util' package. Whereas the 'Iterable' interface is present in the 'java.lang' package.
    --> The 'Iterator' interface defines 3 methods, 'hasNext()', 'next()', and 'remove()'. Whereas the 'Iterable' interface defines a single method which is 'iterator()'.