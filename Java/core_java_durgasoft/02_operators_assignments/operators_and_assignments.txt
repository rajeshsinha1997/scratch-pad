Increment and Decrement Operators:
------------------------------------
--> We can apply 'increment' and 'decrement' operators only for variables, and not for constant values. If we are trying to do so, then we will get compile-time error.

--> Nesting of 'increment' and 'decrement' operators are not allowed.

--> For 'final' variables, we can't apply 'increment' and 'decrement' operators.

--> We can apply 'increment' and 'decrement' operators for every primitive type, except for 'boolean' type.

--> Difference between 'b++' and 'b=b+1':
    -------------------------------------
    If we apply any arithmetic operator between two variables 'a' and 'b', the result type is always
    'max(int, type_of_a, type_of_b)'. But in the case of 'increment' and 'decrement' operators, internal type-casting will be performed automatically.



Arithmetic Operators:
---------------------
--> If we apply any arithmetic operators between two variables 'a' and 'b', the result type is always,

                                max(int, type_of_a, type_of_b)

--> Infinity: In integral arithmetic (byte, short, int, long), there is no way to represent 'Infinity'. Hence, if 'Infinity' is the result, we will get 'ArithmeticException' in integral arithmetic. But, in floating-point arithmetic (float, double), there is a way to represent 'Infinity'. For this, 'Float' and 'Double' classes contains the constants 'POSITIVE_INFINITY' and 'NEGATIVE_INFINITY'. Hence, even though the result is 'Infinity', we won't get any 'ArithmeticException' in floating-point arithmetic.

--> NaN (Not a Number): In integral arithmetic (byte, short, int, long), there is no way to represent 'undefined' values. Hence, if the result is 'undefined', we will get RuntimeException saying 'ArithmeticException: / by zero'. But, in floating-point arithmetic (float, double), there is a way to represent 'undefined' results. For this, 'Float' and 'Double' classes contains the constant 'NaN'. Hence, if the result is 'undefined', we won't get any 'ArithmeticException' in floating-point arithmetic.

--> For any value 'x' including 'NaN', the following expressions returns the value 'false',
    * x < NaN
    * x <= NaN
    * x > NaN
    * x >= NaN
    * x == NaN

--> For any value 'x' including 'NaN', the following expressions returns the value 'true',
    * x != NaN

--> The 'ArithmeticException' in Java is a 'RuntimeException' and not 'Compile Time Error', and it is possible to encounter only in integral arithmetic but not in floating-point arithmetic.

--> The only operators which cause the 'ArithmeticException' are '/' and '%'.



String Concatenation Operator ('+'):
------------------------------------
--> The only overloaded operator in Java is the '+' operator. Sometimes it acts as an arithmetic addition operator, and sometimes it acts as a String concatenation operator. If at least one argument is of String type, then the '+' operator acts as the String concatenation operator, and, if both of the arguments are of Number type, then the '+' operator acts as the arithmetic addition operator.



Relational Operators:
---------------------
--> We can apply relational operators for every primitive type, except for 'boolean' type.

--> We can't apply relational operators for 'Object' types.

--> Nesting of relational operators is not allowed in Java. We will get compile-time error if we do so.



Equality Operators:
-------------------
--> We can apply equality operators for every primitive type, including 'boolean' type also.

--> We can apply equality operators for object types also. For two object references 'r1' and 'r2', 'r1 == r2' returns 'true', if and only if both are referencing to the same object (reference/address comparison).

--> If we apply equality operators for object types, then compulsory there should be some relation between the types of the arguments (either child and parent or of the same type), otherwise we will get compile-time error.

* Difference between '==' operator and 'equals()' method:
  -------------------------------------------------------
  In general, we can use '==' operator for reference comparison (address comparison), and 'equals()' method for content comparison.

--> For any object reference 'r', the expression 'r == null' will always be evaluated to the value 'false'. But, the expression 'null == null' will always be evaluated to 'true'.



'instanceof' Operator:
----------------------
--> We can use the 'instanceof' operator to check whether a given object is of a particular type or not.

--> The syntax of the 'instanceof' operator is as follows,

                                            'r instanceof X'
    
    where,
    r - object reference
    X - name  of a class or interface

--> To use the 'instanceof' operator, compulsory there should be some relation between the argument types. Either it has to be child to parent or they have to be of the same type. Otherwise, we will get compile-time error.

--> For any class or interface 'X', the expression 'null instanceof X' will always be evaluated to 'false'.



Bitwise Operators:
------------------
--> We can apply bitwise operators ('&', '|', '^') for both boolean types and integral types.



Bitwise Complement Operator (~):
--------------------------------
--> We can apply the bitwise complement operator only for the integral types, but not for the boolean types. If we are trying to apply this operator for boolean types, then we will get compile-time error.



Boolean Complement Operator (!):
--------------------------------
--> We can apply boolean complement operator only for the boolean types, but not for the integral types.



Short-Circuit Operators (&&, ||):
---------------------------------
--> These are exactly same as bitwise operators (&, |), except for the following differences,

    * In case of bitwise operators, both arguments should be evaluated always. Whereas, for short-circuit operators, evaluation of the second argument is optional.

    * Relatively performance is low for the bitwise operators compared to the short-circuit operators.

    * Bitwise operators are applicable for both 'boolean' and 'integral' types. Whereas, short-circuit operators are applicable only for the 'boolean' types and not for the 'integral' types.



Type-Cast Operator:
-------------------
--> There are two types of type-casting possible,
    * Implicit Type-Casting
    * Explicit Type-Casting

--> Implicit Type-Casting: In case of implicit type-casting, the compiler is responsible to perform the type-casting. Whenever we are assigning some value of a smaller data-type to some variable of a bigger data-type, implicit type-casting will e performed. It is also known as 'widening' or 'up-casting'. Also, there is no loss of information in this kind of type-casting.

--> Explicit Type-Casting: In case of explicit type-casting, the programmer is responsible to perform the type-casting. Whenever we are assigning some value of a bigger data-type to some variable of a smaller data-type, then explicit type-casting is required. It is also known as 'narrowing' or 'down-casting'. There maybe a chance of loss of information in this kind of type-casting.

--> Whenever we are assigning some value of a bigger data-type to some variable of a smaller data-type by explicit type-casting, the most significant bits (MSB) will be lost. We have to consider only the least significant bits (LSB).

--> If we assign floating-point values to the integral types by explicit type-casting, the digits after the decimal point will be lost.



Assignment Operator:
--------------------
--> There are 3 types of assignment operators,
    * Simple Assignment --> example: int x = 10;
    * Chained Assignment --> example: int a,b,c,d; a=b=c=d=20;
    * Compound Assignment --> example: int a = 10; a+=20;

--> We can't perform chained assignment directly at the time of declaring the variables. Otherwise we will get compile-time error.

--> Sometimes assignment operator is mixed with some other operator. Such type of assignment operators are called compound-assignment operators. The following are the only possible compound assignment operators in Java,
    * +=
    * -=
    * *=
    * /=
    * %=
    * &=
    * |=
    * ^=
    * >>=
    * >>>=
    * <<=

--> In case of compound assignment operators, internal type-casting will be performed automatically.



Conditional Operator (?:):
--------------------------
--> The only possible ternary operator in Java is the conditional operator.
    Example:
                                int x = (10 < 20) ? 30 : 40;
    
--> We can perform nesting of conditional operators as well.



'new' Operator:
---------------
--> We can use the 'new' operator to create an object in Java.

--> After creating an object in Java, the corresponding class's constructor will be executed to perform the initialization of the created object. Hence, the constructor is not used for creation of object, rather it is for the initialization of the created object.

--> In Java we have only 'new' keyword, but not 'delete' keyword. Because, destruction of useless objects is the responsibility of garbage collector.



'[]' Operator:
--------------
--> We use the '[]' operator to declare and create arrays in Java.



Java Operator Precedence:
-------------------------
1. Unary Operators:
    [], x++, x--
    ++x, --x, ~, !
    new, <type>

2. Arithmetic Operators:
    *, /, %
    +, -

3. Shift Operators:
    >>, >>>, <<

4. Comparison Operators:
    <, <=, >, >=, instanceof

5. Equality Operators:
    ==, !=

6. Bitwise Operators:
    &
    ^
    |

7. Short-Circuit Operators:
    &&
    ||

8. Conditional Operator:
    ?:

9. Assignment Operators:
    =, +=, -=, *=, /=, %=, &=, |=, ^=, >>=, >>>=, <<=



Evaluation Order of Java Operands:
----------------------------------
--> In Java, we have only operator precedence, but not operand precedence. Before applying any operator, all operands will be evaluated from left to right.



'new' vs 'newInstance()':
-------------------------
--> We can use the 'new' operator to create an object of a class, only if we know the name of the corresponding class at the beginning.

--> 'newInstance()' is a method present in the class 'Class'. We can use this method to create a Java object if we don't know the name of the corresponding class at the beginning and the name of the corresponding class is available dynamically at runtime.

--> In the case of 'new' operator, based on our requirement, we can invoke any constructor. But 'newInstance()' method internally calls the corresponding class's no-argument constructor, hence to use the 'newInstance()' method, the corresponding class must contain a no-argument constructor, otherwise we will get runtime exception 'InstantiationException'.

--> While using 'new' operator, at runtime if the corresponding class file is not available, then we will get runtime exception 'NoClassDefFoundError', which is also an unchecked exception. While using 'newInstance()' method, at runtime if the corresponding class file is not available, then we will get runtime exception 'ClassNotFoundException', which is also a checked exception.



'instanceof' vs 'isInstance()':
-------------------------------
--> 'instanceof' is an operator in Java. We can use this operator to check if a given Java object is of a particular type or not, where the corresponding type is already known to us at the beginning.

--> 'isInstance()' is a method present in 'java.lang.class'. We can use this method to check if a given Java object is of a particular type or not, where we don't know the corresponding type at the beginning and the type is available dynamically at runtime.

--> 'isInstance()' is a method equivalent of the 'instanceof' operator.
