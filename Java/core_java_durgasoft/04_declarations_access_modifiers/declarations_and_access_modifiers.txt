Java Source File Structure:
---------------------------
* A Java program (Java source file) can contain any number of classes, but at most one class can be declared as 'public'. If there is a 'public' class, then the name of the program and the name of the 'public' class must be matched, otherwise we will get compile-time error.

    --> If there is no 'public' class available in a java program, then we can use any name for the Java program, and there are no restrictions.

    --> If a 'public' class is available in a Java program, then name of the Java program should be same as the name of the 'public' class, otherwise we will get compile-time error.

    --> If a Java program contains more than one 'public' class, then we will get compile-time error.

    --> Whenever we are compiling a Java program, for every class present in that program, a separate class file will be generated.

    --> We can compile a Java program, but we can run a Java class (.class file).

    --> Whenever we are executing a Java class, if the corresponding class file is not available, then we will get runtime exception 'NoClassDefFoundError'. Also, when we are executing a Java class, then the corresponding class's 'main()' method will be executed. If that class doesn't contain a 'main()' method, then we will get runtime exception 'NoSuchMethodError'.

    --> It is not recommended to declare multiple classes in a single Java source file. It is highly recommended to declare only one class per Java source file, and the name of the Java program should be same as the name of the class declared in that Java source file. The main advantage of this approach is readability and maintainability of the code will be improved.



* Types of Import Statements: There are two types of 'import' statements in Java,
    - explicit class import
    - implicit class import

    --> Explicit Class Import: It is highly recommended to use explicit class import, because it improves the readability of the code. Below is an example of explicit class import,
        - import <package_name>.<class_name>

    --> Implicit Class Import: It is not recommended to use implicit class import, because it reduces the readability of the code. Below is an example of implicit class import,
        - import <package_name>.*

* Whenever we are using fully qualified names, it is not required to write import statements. Similarly, whenever we are writing import statements, it is not recommended to use fully qualified names.

* While resolving class names, the Java compiler will always gives a precedence in the following order,
    - explicit class import
    - classes present in the current working directory (default package)
    - implicit class import

* Whenever we are importing a Java package, all classes and interfaces present in that package become available by default, but not the sub-package classes. If we want to use any class from the sub-package, compulsory we should write another import statement until sub-package level.

* All classes and interfaces present in the following packages are by default available to every Java program. Hence, we are not required to write import statement for these packages.
    - java.lang
    - default package (current working directory)

* Import statements are totally compile-time related concepts. If more number of imports are present, then the compile-time will increase in proportion, but there will be no effect on the execution time (runtime).

* Difference between #include (C language) and import statement (Java language): In the case of #include (C language) all of the input-output header files will be loaded at the beginning only (at translation time), hence it is 'static include'. But in the case of import statement (Java language), no class file will be loaded at the beginning. Whenever we are using a particular class, then only the corresponding class file will be loaded. This is considered as 'dynamic include' or 'load-on-demand' or 'load-on-fly'.

* New Features in v1.5 of Java: Below are some of the major features which were newly introduced in the v1.5 of Java,
    - for-each loop
    - var-arg methods
    - Auto-boxing and Auto-unboxing
    - Generics
    - co-verient return types
    - Queue
    - Annotations
    - Enums
    - static-import

* Static Import: Static import was a new concept which was introduced in v1.5 of Java. According to SUN, usage of static import reduces length of the code and improves readability. But, according to worldwide programming experts, usage of the static import creates confusion and reduces readability. Hence, if there is no specific requirement, then it is not recommended to use static import. Usually, we can access static members of a class by using that specific class name. But, whenever we are writing static import, we can access static members directly without class name.

* Explanation of 'System.out.println()': 'System' is a class present in 'java.lang' package. 'out' is a static variable present in the 'System' class of type 'PrintStream'. 'println()' is a method present in the 'PrintStream' class.

* While resolving static members, the Java compiler will always consider the precedence (priority) in the following order,
    - current class static members
    - explicit static imports
    - implicit static imports

* Two packages contains a class or interface with the same name is very rare in Java, and hence ambiguity problem is also very rare in case of normal import statements. But two classes or interfaces contains a variable or method with the same name is very common in Java, and hence ambiguity problem is also very common problem in case of static import statements.

* Difference between normal import and static import statements: We can use normal import statements to import classes and interfaces of a specific package in Java. Whenever we are using normal import statement, it is not required to use the fully qualified names, and we can use the corresponding short names directly. We can use the static import statements to import static members of a specific class or interface in Java. Whenever we are writing static import statements, it is not required to use the corresponding class or interface names to access the static members of that specific class or interface, and we can access them directly.

* Packages: It is an encapsulation mechanism in Java to group related classes and interfaces into a single unit, which is nothing but a package. As example, all classes and interfaces which are required for database operations, are grouped into a single package which is nothing but the 'java.sql' package. All classes and interfaces which are useful for File IO operations are grouped into a separate package which is nothing but the 'java.io' package.

* The main advantages of packages are,
    - To resolve naming conflicts, i.e. unique identification of our components.
    - It improves modularity of the application.
    - It improves maintainability of the application.
    - It provides security for our components.

* There is one universally accepted naming convention for packages, i.e. to use the internet domain name in reverse.
    Ex: 'com.citibank.loan.housing.Account'

* After compiling a Java program, if we want to place the generated class file/files to a specific location, we have to use the below command for compiling the Java program,

    - javac -d <location_to_place_generated_class_files> <java_program_name>.java

    As destination, we can take any valid directory name. But, if the specified directory or path not already available, then we will get compile-time error. Also at the time of execution, we have to use the fully qualified name for the corresponding Java program.

* In any Java source file, there can be at most one package statement, i.e. more than one package statement is not allowed, otherwise we will get compile-time error.

* In any Java program, the first non-comment statement should be a package statement (if it is available). Otherwise we will get compile-time error.

* An empty source file is also a valid Java program.



Class Level Modifier:
---------------------
* Whenever we are writing our own classes, we have to provide some information about our class to the JVM, like whether the class will be accessible from anywhere or not, whether any child class creation is possible or not, whether object creation is possible or not, etc. We can specify this information by using appropriate modifiers.

* The only applicable modifiers for top level classes are,
    - public
    - default
    - final
    - abstract
    - strictfp

* The only applicable modifiers for inner classes are,
    - public
    - default
    - final
    - abstract
    - strictfp
    - private
    - protected
    - static

* Access Specifiers vs Access Modifiers: 'public', 'private, 'protected' and 'default' are considered as 'specifiers'. Except these remaining are considered as 'modifiers'. But this rule is applicable only for old languages like C or C++. In Java there is no such rule, and all are considered as 'modifiers' only, there is no word like 'specifier' in Java.

* 'public' class: If a Java class is declared as 'public', then we can access that class from anywhere.

* 'default' class: If a Java class is declared as 'default', then we can access that class only within the current package, i.e. from outside package we can't access. Hence, 'default' access is also known as 'package-level' access.

* 'final' modifier: 'final' is a modifier in Java which is applicable for classes, methods and variables. The main advantage of 'final' keyword is, we can achieve security and we can provide unique implementation. But, the main disadvantage of the 'final' keyword is, we are missing key benefits of OOPs (Inheritance because of final classes, Polymorphism because of final methods). Hence, if there is no specific requirement, then it is not recommended to use the 'final' keyword.

* 'final' class: If a Java class is declared as 'final', we can't extend functionalities of that class, i.e. we can't create any child class for that class, i.e. 'inheritance' is not possible for 'final' classes. Every method present inside a 'final' class is always 'final' by default. But, every variable present inside a 'final' class need not be 'final'.

* 'final' methods: In Java, the methods which are defined in a parent class, are by default available to the child classes through 'inheritance'. If we are not satisfied with the method implementations in the parent class, then we can redefine the methods in the child classes based on our requirements. This process is called 'overriding'. If the parent class method is declared as 'final', then we can't override that method in the child classes, because it's implementation is 'final'.

* 'abstract' modifier: 'abstract' is a modifier in Java which is applicable for classes and methods but not for variables.

* 'abstract' class: For any class in Java, if we are not allowed to create an object (because of partial implementation), such type of class we have to declare with the 'abstract' modifier, i.e. for abstract classes instantiation is not possible. If we are extending an abstract class, then for each and every abstract method of parent class, we should provide implementation, otherwise we have to declare the child class as 'abstract' as well.

* 'abstract' method: Even though we don't know about implementation, still we can declare a method with the 'abstract' modifier, i.e. for abstract methods only declaration is available but not implementation. Hence, abstract method declaration should end with a semi-colon (;). Child class is responsible to provide implementation for the abstract methods present in the parent class. By declaring abstract methods in the Parent class, we can provide guidelines to the child classes, such that which methods compulsory child has to implement. An abstract method never deals with implementation. If any modifier (public, private, protected, final, static, native, synchronized, strictfp) in Java deals with implementation, then forms illegal combination with the 'abstract' modifier.

* 'abstract' class vs 'abstract' method: If a Java class contains at least one abstract method, then compulsory we should declare that class as 'abstract'. Otherwise, we will get compile-time error. If a class contains at least one abstract method, that means implementation is not complete for the methods with the keyword 'abstract'. Hence, it is not recommended to create object of that class. To restrict object instantiation compulsory we should declare that class as 'abstract' Even though a Java class does not contain any abstract method, still we can declare that specific class as 'abstract', if we don't want instantiation of that class. That means an abstract class in Java can contain zero number of abstract method also. As example, HttpServlet class is an abstract class but it doesn't contain any abstract method. Also, every Adapter class in Java is recommended to be declared as 'abstract', but it doesn't contain any abstract method.

* 'final' modifier vs 'abstract' modifier: Abstract methods compulsory we should override in the child classes to provide implementation. Where as we can't override final methods, hence 'final-abstract' combination is illegal combination for methods. For final classes, we can't create child class, where as for abstract classes we should create child class to provide implementation. Hence, 'final-abstract' combination is illegal combination for classes as well.

* An abstract class can contain 'final' methods, but a final class can't have any 'abstract' method.

* It is highly recommended to use the 'abstract' modifier because it promotes several OOP features (like Inheritance and Polymorphism).

* 'strictfp' (Strict Floating Point) modifier: The 'strictfp' modifier was introduced in the v1.2 of Java. We can use this modifier for classes and methods, but not for variables. Usually the results of floating-point arithmetic are varied from platform to platform. If we want platform independent results for floating-point arithmetic, then we should go for the 'strictfp' modifier.

* 'strictfp' class: If a class is declared as 'strictfp', then every floating-point calculation present in every 'concrete' method has to follow the 'IEEE 754' standard, so that we will get platform independent results. We can declare a class as both 'abstract' and 'strictfp', i.e. 'abstract-strictfp' combination is legal for classes but illegal for methods in Java.

* 'strictfp' method: If a method is declared as 'strictfp', all floating-point calculations in that method has to follow the 'IEEE 754' standard, so that we get platform independent results. The 'abstract' modifier never talks about implementation, whereas the 'strictfp' modifier always talks about implementation. Hence, 'abstract-strictfp' combination is illegal for methods in Java.



Member (Methods & Variables) Level Modifiers:
---------------------------------------------
* 'public' member: If a member is declared as 'public', then we can access that member from anywhere, but the corresponding container class should be visible, i.e. before checking member's visibility we have to check the visibility of the container class.

* 'default' member: If a member is declared as 'default', then we can access that member only within the current package, i.e. from outside of the package we can't access. Hence, the 'default' access is also known as 'package level access'.

* 'private' member: If a member is declared as private, then we can access that member only within the corresponding container class, i.e. from outside of the class we can't access. The methods with the 'abstract' modifier should be available to the child classes to provide implementation, whereas methods with the 'private' modifier are not available to the child classes to provide implementation. Hence, 'private-abstract' combination is illegal for methods.

* 'protected' member: If a member is declared as 'protected', then we can access that member anywhere in the current package, but only in the child classes outside of the current package. We can access 'protected' members within the current package anywhere either by using parent reference or by using child reference. But, we can access 'protected' members in outside package, only in child classes, and we should use child class reference only, i.e. parent class reference can't be used to access 'protected' members from outside of the current package. We can access 'protected' members from outside of the current package only in child classes, and we should use that specific child class's reference only.

* The most restricted access modifier in Java is 'private'. The most accessible access modifier in Java is 'public'. The most recommended modifier in Java for any data member (variable) is 'private', but the most recommended modifier for methods is 'public'.

* 'final' variable:
    - Final Instance Variable: If the value of a variable is varying from object to object, such type of variables are called 'instance' variables. For every object a separate copy of instance variables will be created. For 'instance' variables, we are not required to perform the initialization explicitly. JVM will always provide corresponding default values. But if an 'instance' variable is declared as 'final', then compulsory we have to perform the initialization explicitly, whether we are using that variable or not, and JVM won't provide any default value. For 'final' instance variables, compulsory we should perform the initialization before the completion of the corresponding constructor, i.e. the following are the various places for initialization,
        1. At the time of declaration
        2. Inside an instance block
        3. Inside the constructor
    These are the only possible places to perform initialization for 'final' instance variables. If we are trying to perform initialization anywhere else, then we will get compile-time error.

    - Final Static Variable: If the value of a variable is not varying from object to object, such type of variables are not recommended to declare as 'instance' variables. We have to declare those variables at class level by using the 'static' modifier. In the case of 'instance' variables, for every object a separate copy will be created, but in case of 'static' variables, a single copy will be created at the class level and will be shared by every object of that class. For 'static' variables, it is not required to perform initialization explicitly, JVM will always provide default values. If the 'static' variable is declared as 'final', then compulsory we should perform initialization explicitly, otherwise we will get compile-time error, and JVM won't provide any default values. For 'final-static' variables, compulsory we should perform initialization before class loading completion, i.e. the following are various places for this,
        1. At the time of declaration
        2. Inside static block
    These are the only possible places to perform initialization for 'final-static' variables. If we are trying to perform the initialization anywhere else, then we will get 'compile-time' error.

    - Final Local Variable: Sometimes to meet temporary requirements of the programmer, we have to declare variables inside a method, block, or constructor. Such type of variables are called 'local' variables, or 'temporary' variables, or 'stack' variables, or 'automatic' variables. For 'local' variables, JVM won't provide any default values, and compulsory we should perform initialization explicitly, before using that 'local' variable, i.e. if we are not using then it is not required to perform initialization for 'local' variable. Even though we are declaring any 'local' variable as 'final', we have to perform initialization only before using that variable, i.e. if we are not using then it is not required to perform initialization even though the 'local' variable is declared as 'final'. The only applicable modifier for 'local' variable is 'final'. If we are trying to apply any other modifier to a 'local' variable, then we will get compile-time error.

* 'static' modifier: The 'static' modifier is applicable for only methods and variables but not for top-level classes in Java. We can't declare top-level class with the 'static' modifier, but we can declare an inner-class as 'static', such type of inner classes are called 'static-nested classes'. In the case of 'instance' variables, for every object a separate variable copy will be created, but in case of 'static' variables a single copy will be created at class level and will be shared by every object of that class. We can't access 'instance' members directly from a 'static' area, but we can access 'static' members from instance area directly.

    - 'Overloading' concept is applicable for static methods including the 'main()' method. But JVM will always call the 'main()' method with the argument 'String[] args'. The other 'overloaded' method we have to call just like a normal method call.

    - 'Inheritance' concept is applicable for 'static' methods, including the 'main()' method. Hence, while executing child class, if the child class doesn't contain a 'main()' method, then the parent class's 'main()' method will be executed.

    - It seems 'overriding' concept is applicable for the 'static' methods, but it is not 'overriding', it is 'method-hiding'.

    - For 'static' methods, 'Overloading' and 'Inheritance' concepts are applicable, but 'overriding' concepts are not applicable. But instead of 'overriding', 'method-hiding' concept is applicable.

    - Inside a method's implementation, if we are using at least one 'instance' variable, then that method talks about a particular object, hence we should declare that method as an 'instance' method. In the other hand, inside a method's implementation if we are not using any 'instance' variable then that specific method no way related to any object, hence we have to declare such methods as 'static' methods irrespective of whether we are using any 'static' variable in that method or not.

    - For 'static' methods, implementation should be available, whereas for 'abstract' methods implementation is not available. Hence 'abstract-static' combination is illegal for methods in Java.

* 'synchronized' modifier: 'synchronized' is a modifier in Java which is applicable for methods and blocks only, and not for classes and variables. If multiple threads are trying to operate simultaneously on the same Java object, then there maybe a chance of data inconsistency problem. This is also known as the 'race-condition'. We can overcome this problem by using the 'synchronized' keyword. If a method or block is declared as 'synchronized', then at a time only a single thread is allowed to execute that specific method or block on the given object, so that the data inconsistency problem will be resolved. But the main disadvantage of the 'synchronized' keyword is it increases the waiting time of threads and creates performance problems. Hence, if there is no specific requirement, then it is not recommended to use the 'synchronized' keyword. A 'synchronized' method should compulsory contain some implementation, whereas an 'abstract' method doesn't contain any implementation. Hence, 'abstract-synchronized' is illegal combination of modifiers for methods in Java.

* 'native' modifier: The 'native' modifier is applicable only for methods in Java, and we can't apply this modifier anywhere else. The methods which are implemented in non-java (mostly C or C++), are called 'native' methods or 'foreign' methods. The main objectives of the 'native' keyword are,
    - To improve performance of the System
    - To achieve 'machine level' or 'memory level' communication
    - To use already existing legacy 'non-java' code.
For 'native' methods, implementation is already available in old languages (like C or C++), and we are not responsible to provide implementation. Hence, 'native' method declaration should end with a semicolon (;). For 'native' methods, implementation is already available in old languages, but for 'abstract' methods implementation should not be available, hence we can't declare any 'native' method as 'abstract', i.e. 'native-abstract' combination is illegal for methods in Java. We can't declare any 'native' method as 'strictfp', because there is not guaranty that the old languages have followed the 'IEEE 754' standard, hence 'native-strictfp' combination is illegal for methods in Java. The main advantage of the 'native' keyword is performance will be improved, but the main 'disadvantage' of the 'native' keyword is it breaks the platform independent nature of Java. 